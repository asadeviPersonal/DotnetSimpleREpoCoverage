version: 2.1
orbs:
  dotnet-tools: bwp-orbs/dotnet-tools@30.0.0
  
jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    
    steps:
      - checkout
      - run:
          name: Restore solution
          command: dotnet restore 
      - run:
          name: Build solution
          command: dotnet build   
          
      - run:
          name: Run tests 
          command: dotnet test --no-build --logger "trx;LogFileName=/root/project/tests/TestResult/xunit-output.xml"
      - store_artifacts:
          path: /root/project/tests/TestResult/
          when: always
      - run:
          name: coverage
#           command: dotnet test --no-build -v n --results-directory:test_coverage --collect:"Code Coverage"
          command: dotnet test -c Debug -v minimal 
            --no-build 
            --collect:"XPlat Code Coverage" 
            --settings coverlet.runsettings
            --results-directory './CodeCoverageResults'
            
      - store_artifacts:
          path: ./CodeCoverageResults
          
      - run:
          name: install report
          command: | 
            dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.7.1
            dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools --version 4.7.1
            dotnet new tool-manifest
            dotnet tool install dotnet-reportgenerator-globaltool --version 4.7.1
      - run: 
          command: export PATH="$PATH:/root/.dotnet/tools"
          name: pakage

      - run:
          command: | 
                reportgenerator 
                  "-reports:./CodeCoverageResults/../coverage.cobertura.xml" 
                  "-targetdir:./coveragereportHTML" 
                  -reporttypes:Html
#           command: |
#               reportgenerator \
#                 -reports:./CodeCoverageResults/../coverage.cobertura.xml \
#                 -targetdir:./coveragereportHTML \
#                 -verbosity:Off
          name: Generate code coverage report
#           command: dotnet $(asadeviPersonal)\.nuget\packages\reportgenerator\x.y.z\tools\netcoreapp3.0\ReportGenerator.dll \
#                   "-reports:./CodeCoverageResults/../coverage.cobertura.xml" \
#                   "-targetdir:./coveragereportHTML" \
#                   -reporttypes:Html
                  
      - store_artifacts:
          path: ./coveragereportHTML
          
#       - name: Setup .NET Core # Required to execute ReportGenerator
#         uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: 3.1.300

      
#       - name: ReportGenerator
#         uses: danielpalme/ReportGenerator-GitHub-Action@4.7.1
#         with:
#           reports: './CodeCoverageResults/../coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
#           targetdir: ./coveragereportHTML  # REQUIRED # The directory where the generated report should be saved.
#           reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
#           sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
#           historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
#           plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
#           assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#           classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#           filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#           verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
#           title: '' # Optional title.
#           tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
#           customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          
#       - run:
#           name: Install report
#           command: dotnet tool install dotnet-reportgenerator-globaltool  

#       - run:
#           command: reportgenerator "-reports:./CodeCoverageResults/../coverage.cobertura.xml" "-targetdir:./coveragereport" -reporttypes:Html
#           command: dotnet $(asadeviPersonal).nuget\packages\reportgenerator\x.y.z\tools\netcoreapp3.0\ReportGenerator.dll -reports:./CodeCoverageResults/../coverage.cobertura.xml \
#                 -targetdir:./coveragereportHTML \
#                 -verbosity:Off
                                             
#           command: |
#               reportgenerator \
#                 -reports:./CodeCoverageResults/../coverage.cobertura.xml \
#                 -targetdir:./coveragereportHTML \
#                 -verbosity:Off
#           name: Generate code coverage report


 
          
          
       
          
#       - run:
#           command: |
#             dotnet test \
#               --logger trx \
#               -r ~/repo/Tests/results \
#               /p:CollectCoverage=true \
#               /p:CoverletOutputFormat=opencover \
#               /p:CoverletOutput=/root/repo/Tests/results/ \
#               /p:Exclude="[MySqlConnector]*%2c[System.*]*"
#           name: Unit Test
#       - run:
#           command: |
#             reportgenerator \
#               -reports:/root/repo/Tests/results/coverage.opencover.xml \
#               -targetdir:/root/repo/Tests/results/html_report \
#               -verbosity:Off
#           name: Generate code coverage report
#       - run:
#           command: |
#             trx2junit ~/repo/Tests/results/*.trx
#           name: Convert test results to junit format
#           when: always
#       - store_test_results:
#           path: ~/repo/Tests/results
#       - store_artifacts:
#           destination: TestResults
#           path: ~/repo/Tests/results
#       - save_cache:
#           key: >-
#             v1-unit-test-coverage-{{ .Environment.CIRCLE_BRANCH }}-{{
#             .Environment.CIRCLE_SHA1 }}
#           paths:
#             - ~/repo/Tests/results
     
